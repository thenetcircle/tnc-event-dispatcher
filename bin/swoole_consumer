#!/usr/bin/env php
<?php

if (version_compare('5.6.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        'The runner requires PHP 5.6; using the latest version of PHP is highly recommended.' . PHP_EOL
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('COMPOSER_AUTOLOAD_FILE', $file);

        break;
    }
}

unset($file);

if (!defined('COMPOSER_AUTOLOAD_FILE')) {
    fwrite(STDERR,
           'You need to set up the project dependencies using the following commands:' . PHP_EOL .
           'wget http://getcomposer.org/composer.phar' . PHP_EOL .
           'php composer.phar install' . PHP_EOL
    );

    die(1);
}


require COMPOSER_AUTOLOAD_FILE;

// todo get return value for failed creation

$processes               = [];
$fetchersNum             = 1;
$workersNumOfEachFetcher = 1;

class a
{
    public $b = '1';
    public $c = '2';
}

for ($i = 0; $i < $fetchersNum; $i++) {
    $fetcher    = new swoole_process('fetcherProcess');
    $fetcher->useQueue();
    $fetcherPid = $fetcher->start();
    $processes[$fetcherPid]['fetcher'] = $fetcher;

    /*for ($j = 0; $j < $workersNumOfEachFetcher; $j++) {
        $worker    = new swoole_process('workerProcess');
        $workerPid = $worker->start();
        $processes[$fetcherPid]['workers'][$workerPid] = $worker;
    }*/
}

function fetcherProcess(swoole_process $fetcher)
{
    while(true) {
        $recv = $fetcher->pop();
        var_dump($recv);
    }
}

function workerProcess(swoole_process $worker)
{
    echo 'Im a worker';
    sleep(10);
}

while(true) {
    $obj = new a();
    $fetcher->push($obj);
    sleep(1);
}

swoole_process::wait();